


LOGIC
=====

Combinatorial Logic



Block Screenshot
~~~~~~~~~~~~~~~~





Contents
~~~~~~~~


+ `Combinatorial Logic`_
  +

    + `Palette`_
    + `Description`_
    + `Data types`_
    + `Dialog box`_
    + `Default properties`_
    + `Example 1`_
    + `Example 2`_
    + `Interfacing function`_
    + `Computational function`_
    + `See also`_





Palette
~~~~~~~


+ `Integer palette`_




Description
~~~~~~~~~~~

This block implements a standard truth table for modeling programming
array, digital circuit and any other boolean expressions.

The user must specify a matrix that defines all the possible block
outputs in the **Truth Table** field. In consequence, the number of
rows must be a power of two. Each row of the matrix contains a logic
combination of input elements.

Setting the parameter **Truth Table** defines the number of inputs and
outputs in the following way :


+ The number of inputs is defined by the equation:
+ The number of outputs is equal to the number of columns of the
  matrix.


This block can be activated by an implicit input event or it can
inherit the clock from the regular input (parameter **Accepts
Inherited Events**).





Data types
~~~~~~~~~~

The block supports the following types :


+ Input : scalar. All Scilab's integer data type. A positive input is
  considered as logical 1, a negative or a null input as logical 0.
+ Output : same type and dimensions than input.




Dialog box
~~~~~~~~~~






+ **Truth Table** The matrix of outputs. The elements must be 0 or 1.
  For more information see the description part. Properties : Type 'mat'
  of size [-1,-2].
+ **Accepts Inherited Events (0:No, 1:Yes)** Specifies if the clock is
  inherit or not. 0 or 1 Properties : Type 'vec' of size 1.




Default properties
~~~~~~~~~~~~~~~~~~


+ **always active:** no
+ **direct-feedthrough:** yes
+ **zero-crossing:** no
+ **mode:** no
+ **regular inputs:** **- port 1 : size [1,1] / type 5** **- port 2 :
  size [1,1] / type 5**
+ **regular outputs:** **- port 1 : size [1,1] / type 5**
+ **number/sizes of activation inputs:** 1
+ **number/sizes of activation outputs:** 0
+ **continuous-time state:** no
+ **discrete-time state:** no
+ **object discrete-time state:** no
+ **name of computational function:** logic




Example 1
~~~~~~~~~

The easiest example to consider is the OR example.In this case we have
two inputs and only one output. The truth table for this example is :


**input 1** **input 2** **output** 0 0 0 0 1 1 1 0 1 1 1 1
and the **Truth Table** parameter is writing :




::

    [0;1;1;1]




Example 2
~~~~~~~~~

This example shows the use of LOGIC bloc as a demultiplexer. The goal
is to send the true constant input on one of the four outputs
according to the state of the two selection inputs: * `a`* and * `b`*.
The truth table is the following:


**Constant** **a** **b** **Q0** **Q1** **Q2** **Q3** 0 X X 0 0 0 0 1 0
0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 1
where * `X`* stands for "indifferent".

To set this table in the **Truth Table** parameter, we can simply
write:




::

    [`zeros`_(4,4) ; `eye`_(4,4)]




The following figure shows the resulting outputs * `Q 0 `* Ã  * `Q 3 `*
during the simulation when the selection inputs * `a`* and * `b`* are
generated by a binary counter. `Open this example in Xcos`_



Interfacing function
~~~~~~~~~~~~~~~~~~~~


+ `SCI/modules/scicos_blocks/macros/IntegerOp/LOGIC.sci`_




Computational function
~~~~~~~~~~~~~~~~~~~~~~


+ SCI/modules/scicos_blocks/src/c/logic.c




See also
~~~~~~~~


+ `BITSET`_ Set a Bit
+ `BITCLEAR`_ Clear a Bit
+ `LOGICAL_OP`_ Logical operation
+ `EXTRACTBITS`_ Bits Extraction


.. _BITCLEAR: BITCLEAR.html
.. _Interfacing function: LOGIC.html#Interfacingfunction_LOGIC
.. _Example 1: LOGIC.html#Example_1_LOGIC
.. _Default properties: LOGIC.html#Defaultproperties_LOGIC
.. _Data types: LOGIC.html#Data_Type_LOGIC
.. _See also: LOGIC.html#Seealso_LOGIC
.. _Computational function: LOGIC.html#Computationalfunction_LOGIC
.. _EXTRACTBITS: EXTRACTBITS.html
.. _Palette: LOGIC.html#Palette_LOGIC
.. _Example 2: LOGIC.html#Example_2_LOGIC
.. _SCI/modules/scicos_blocks/macros/IntegerOp/LOGIC.sci: nullscilab.scinotes/scicos_blocks/macros/IntegerOp/LOGIC.sci
.. _BITSET: BITSET-b934c0d76f55255a47ccca35a05e32e3.html
.. _Dialog box: LOGIC.html#Dialogbox_LOGIC
.. _LOGICAL_OP: LOGICAL_OP.html
.. _Open this example in Xcos: nullscilab.xcos/xcos/examples/integer_pal/en_US/LOGIC_en_US.xcos
.. _Combinatorial Logic: LOGIC.html
.. _Integer palette: Integer_pal.html
.. _Description: LOGIC.html#Description_LOGIC


